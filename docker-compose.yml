version: '3.8'

services:
  # Flask Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: bodyscale-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://bodyscale:bodyscale123@db:5432/bodyscale_dev
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
      - ./static/videos:/app/static/videos
      - ./ml/data:/app/ml/data
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - bodyscale-network
    command: flask run --host=0.0.0.0 --port=5000 --reload

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bodyscale-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - bodyscale-network
    command: npm run dev

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: bodyscale-db
    environment:
      - POSTGRES_USER=bodyscale
      - POSTGRES_PASSWORD=bodyscale123
      - POSTGRES_DB=bodyscale_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - bodyscale-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bodyscale-redis
    ports:
      - "6379:6379"
    networks:
      - bodyscale-network

  # Adminer (Database UI)
  adminer:
    image: adminer
    container_name: bodyscale-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
    networks:
      - bodyscale-network

volumes:
  postgres_data:
  node_modules:

networks:
  bodyscale-network:
    driver: bridge