import cv2, json, mediapipe as mp, numpy as np, pathlib

VIDEO_IN  = "my_squat.mp4"       # ★自分の動画名
VIDEO_OUT = "overlay_out.mp4"
IDEAL_JSON = "ideal_pose.json"   # ★理想座標（例：squat）

# 0. 準備 -----------------------------------------------------------
with open(IDEAL_JSON, "r") as f:
    ideal_all = json.load(f)["squat"]          # ← 種目名で選択
mp_pose = mp.solutions.pose.Pose(static_image_mode=False)

cap = cv2.VideoCapture(VIDEO_IN)
W, H = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps  = cap.get(cv2.CAP_PROP_FPS)
four = cv2.VideoWriter_fourcc(*"mp4v")
writer = cv2.VideoWriter(VIDEO_OUT, four, fps, (W, H))

# ランドマーク線リスト（主要 12 本） -------------------------------
connect = [("LEFT_SHOULDER","RIGHT_SHOULDER"),("LEFT_SHOULDER","LEFT_ELBOW"),
           ("LEFT_ELBOW","LEFT_WRIST"), ("RIGHT_SHOULDER","RIGHT_ELBOW"),
           ("RIGHT_ELBOW","RIGHT_WRIST"),("LEFT_SHOULDER","LEFT_HIP"),
           ("RIGHT_SHOULDER","RIGHT_HIP"),("LEFT_HIP","RIGHT_HIP"),
           ("LEFT_HIP","LEFT_KNEE"),("LEFT_KNEE","LEFT_ANKLE"),
           ("RIGHT_HIP","RIGHT_KNEE"),("RIGHT_KNEE","RIGHT_ANKLE")]

# 1. 各フレーム処理 -------------------------------------------------
while True:
    ret, frame = cap.read()
    if not ret: break

    h, w, _ = frame.shape
    # 1-1 実測ランドマーク
    res = mp_pose.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
    meas_px = {}
    if res.pose_landmarks:
        for lm_id, lm in enumerate(res.pose_landmarks.landmark):
            meas_px[lm_id] = (int(lm.x*w), int(lm.y*h))

    # 1-2 理想ランドマークをピクセル化
    ideal_px = {}
    for name, xyz in ideal_all.items():
        ideal_px[name] = (int(xyz["x"]*w), int(xyz["y"]*h))

    # 1-3 描画用レイヤー作成
    overlay = frame.copy()
    # 理想骨格：青
    for a,b in connect:
        if a in ideal_px and b in ideal_px:
            cv2.line(overlay, ideal_px[a], ideal_px[b], (255,120,0), 2)
    for p in ideal_px.values():
        cv2.circle(overlay, p, 4, (255,120,0), -1)

    # 実測骨格：赤
    if meas_px:
        def get(id): return meas_px.get(int(mp.solutions.pose.PoseLandmark[id].value))
        for a,b in connect:
            pa, pb = get(a), get(b)
            if pa and pb:
                cv2.line(overlay, pa, pb, (0,0,255), 2)
        for p in meas_px.values():
            cv2.circle(overlay, p, 4, (0,0,255), -1)

    # 1-4 半透明で重ねる
    out = cv2.addWeighted(overlay, 0.6, frame, 0.4, 0)

    writer.write(out)

cap.release(); writer.release(); mp_pose.close()
print(f"✔ 完了: {VIDEO_OUT} に保存しました")
